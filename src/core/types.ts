// src/core/types.ts
import type { LLMConfig as InternalLLMConfig } from "../llm/mdToSEO";

/**
 * @file Defines shared TypeScript types and interfaces used throughout the MarkBoost-SEO library.
 * These types describe the structure of processed notes, SEO data, configuration options, and scan results.
 */

/**
 * Represents SEO-related data generated for a Markdown note, typically by the `markdownToSEO` function.
 * It primarily includes an SEO-optimized title and meta description.
 *
 * Properties:
 * - `title`: Optional. The SEO-optimized title for the note, which might be the original or LLM-suggested.
 * - `description`: Optional. The SEO-optimized meta description generated by the LLM.
 * - `keywords`: Note: Currently always `undefined` as keyword generation is not implemented in `markdownToSEO`. Kept for future use.
 */
export interface SEOData {
  title?: string;
  description?: string;
  keywords?: undefined;
}

/**
 * Defines user-configurable options for LLM (Large Language Model) interactions, specifically for the `markdownToSEO` function.
 * This allows users to specify the model name and content length parameters for SEO generation,
 * picking a subset of properties from the internal LLMConfig used within `mdToSEO.ts`.
 *
 * Properties (from `InternalLLMConfig`):
 * - `modelName`: Optional. The name of the LLM model to use.
 * - `minContentLengthForSeo`: Optional. Minimum content length (e.g., in words) for a note to be considered for SEO generation.
 * - `maxContentLengthForPrompt`: Optional. Maximum content length (e.g., in words) to be used as an excerpt in the LLM prompt.
 */
export interface LLMConfigOptions
  extends Pick<
    InternalLLMConfig,
    "modelName" | "minContentLengthForSeo" | "maxContentLengthForPrompt"
  > {
  // Additional library-level LLM options could be defined here in the future if needed.
}

/**
 * Represents a single Markdown file processed by the library.
 * It contains extracted metadata like title and paths, generated slugs, and optionally,
 * the file's original content and any generated SEO data.
 *
 * Properties:
 * - `id`: A unique identifier for the node, typically the same as `fullPathSlug`. e.g., "blog/my-first-post"
 * - `title`: The original title of the note, usually extracted from its filename (excluding extension). e.g., "My First Post"
 * - `filePath`: The relative file path of the note from the scanned `contentPath`, using POSIX separators. e.g., "blog/my-first-post.md"
 * - `fullPathSlug`: The full, normalized, URL-friendly slug including directory structure, derived from `filePath`. e.g., "blog/my-first-post"
 * - `simpleSlug`: The simple, normalized, URL-friendly slug based only on the note's title. e.g., "my-first-post"
 * - `content`: Optional. The original Markdown content of the file. Included if `ScanOptions.includeFileContent` is true.
 * - `seo`: Optional. SEO data (`SEOData`) generated for the note. Populated if `ScanOptions.generateSeo` is true and criteria are met.
 * - `frontmatter`: Optional. Parsed frontmatter data. (*Future extension*)
 * - `lastModified`: Optional. The last modified date of the file. (*Future extension*)
 */
export interface ProcessedNode {
  id: string;
  title: string;
  filePath: string;
  fullPathSlug: string;
  simpleSlug: string;
  content?: string;
  seo?: SEOData;
  // frontmatter?: Record<string, any>; // Future extension
  // lastModified?: Date; // Future extension
}

/**
 * Defines the configuration options for the main `scanAndProcessNotes` function.
 * These options control aspects like the target directory, files to ignore,
 * and whether to enable features like SEO generation or content inclusion.
 *
 * Properties:
 * - `contentPath`: Required. The root directory path of the Markdown content to be scanned.
 * - `ignorePatterns`: Optional. An array of glob patterns for ignoring specific files or folders during the scan.
 * - `generateSeo`: Optional. If true, attempts LLM-based SEO data generation for eligible files. Defaults to `false`.
 * - `llmConfig`: Optional. Configuration settings for LLM processing, used if `generateSeo` is true.
 * - `includeFileContent`: Optional. If true, includes the original Markdown content in each `ProcessedNode`. Defaults to `false`.
 * - `forceScan`: Optional. If true, bypasses the in-memory cache in production and forces a full re-scan. Defaults to `false`.
 * - `slugifyFn`: Optional. A custom function to generate slugs. (*Future extension*)
 * - `includeFrontmatter`: Optional. If true, parses Markdown frontmatter. (*Future extension*)
 * - `includeLastModified`: Optional. If true, includes file last modified dates. (*Future extension*)
 */
export interface ScanOptions {
  contentPath: string;
  ignorePatterns?: string[];
  generateSeo?: boolean;
  llmConfig?: LLMConfigOptions;
  includeFileContent?: boolean;
  forceScan?: boolean;
  // slugifyFn?: (text: string, isFullPath: boolean) => string; // Future extension
  // includeFrontmatter?: boolean; // Future extension
  // includeLastModified?: boolean; // Future extension
}

/**
 * Represents the structured result returned by the `scanAndProcessNotes` function.
 * It includes a list of all processed notes and maps for efficient data access by different slug types.
 *
 * Properties:
 * - `allNotes`: An array containing all `ProcessedNode` objects generated from the scanned files.
 * - `notesMapByFullPathSlug`: A Map for quick lookup of a `ProcessedNode` using its `fullPathSlug` as the key.
 * - `notesMapBySimpleSlug`: A Map for finding all `fullPathSlug`s that correspond to a given `simpleSlug`, useful for handling duplicate filenames.
 */
export interface ScanResult {
  allNotes: ProcessedNode[];
  notesMapByFullPathSlug: Map<string, ProcessedNode>;
  notesMapBySimpleSlug: Map<string, Set<string>>;
}
